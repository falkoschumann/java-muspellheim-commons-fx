/*
 * Muspellheim Commons FX
 * Copyright (c) 2019 Falko Schumann
 */

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'org.openjfx:javafx-plugin:0.0.8'
    }
}

plugins {
  // Compile
  id 'java-library'
  id 'io.freefair.lombok' version '4.1.4'

  // Test
  id 'jacoco'

  // Check
  id 'com.diffplug.gradle.spotless' version '3.26.1'
  id 'checkstyle'
  id 'com.github.spotbugs' version '2.0.1'
  id 'org.sonarqube' version '2.8'

  // Deploy
  id 'maven-publish'
  id 'com.jfrog.bintray' version '1.8.4'
}

if (System.getProperty('java.version').startsWith('1.8')) {
    println("""
        |######################################################################
        |#                         Build with Java 8                          #
        |######################################################################
    """.stripMargin())
} else {
    println("""
        |######################################################################
        |#                       Build with OpenJFX 11                        #
        |######################################################################
    """.stripMargin())
    apply plugin: 'org.openjfx.javafxplugin'

    javafx {
        version = '11'
        modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.swing']
    }
}

version = '4.10.0'

// ###################################################################
// Java Library
// ###################################################################

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
compileJava.options.encoding = 'UTF-8'
compileJava.options.compilerArgs += ["-Xlint:all", "-Xlint:-serial"]
compileTestJava.options.encoding = 'UTF-8'
compileTestJava.options.compilerArgs += ["-Xlint:all", "-Xlint:-serial"]

java {
  registerFeature('junitSupport') {
    usingSourceSet(sourceSets.main)
  }
}

repositories {
    jcenter()
}

dependencies {
    junitSupportImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'

    api 'de.muspellheim:muspellheim-commons:2.2.0'
    api 'org.controlsfx:controlsfx:8.40.15'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Muspellheim Commons FX'
        attributes 'Implementation-Version': project.version
        attributes 'Implementation-Vendor': 'Falko Schumann'
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
}

javadoc {
    title = "Muspellheim Commons FX v${project.version}"
    options.links += 'https://docs.oracle.com/en/java/javase/11/docs/api/'
    options.links += 'https://javadoc.io/doc/de.muspellheim/muspellheim-commons/2.0.0/'
    options.overview = file('src/main/javadoc/overview.html')
}
build.dependsOn += javadoc

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task runDemo(type: JavaExec) {
    group 'application'
    classpath = jar.outputs.files + sourceSets.main.runtimeClasspath - sourceSets.main.output
    main = 'de.muspellheim.commons.fx.demo.App'
}

// ###################################################################
// Lombok
// ###################################################################

lombok {
  config['lombok.nonNull.exceptionType'] = 'Jdk'
  config['lombok.anyConstructor.addConstructorProperties'] = 'true'
}

// ###################################################################
// Jacoco
// ###################################################################

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
        }
        rule {
            element = 'METHOD'
            limit {
                counter = 'COMPLEXITY'
                value = 'TOTALCOUNT'
                maximum = 10
            }
        }
    }
}
check.dependsOn += [jacocoTestCoverageVerification, jacocoTestReport]

// ###################################################################
// Spotless
// ###################################################################

spotless {
  java {
    googleJavaFormat()
    licenseHeaderFile 'config/spotless/license.header'
  }
}

// ###################################################################
// Checkstyle
// ###################################################################

checkstyle {
  maxWarnings = 0
}

// ###################################################################
// SpotBugs
// ###################################################################

spotbugs {
  excludeFilter = file("$rootDir/config/spotbugs/excludeFilter.xml")
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    xml.enabled = false
    html.enabled = false
    text.enabled = true
  }
}

task printSpotBugsReportMain() {
  doLast {
    printSpotBugsReport('main')
  }
}
spotbugsMain.finalizedBy printSpotBugsReportMain

task printSpotBugsReportTest() {
  doLast {
    printSpotBugsReport('test')
  }
}
spotbugsTest.finalizedBy printSpotBugsReportTest

static def printSpotBugsReport(String sourceSet) {
  def report = Paths.get("build/reports/spotbugs/${sourceSet}.text")
  if (Files.exists(report)) {
    def lines = Files.readAllLines(report)
    lines.forEach { l -> println(l) }
  }
}

// ###################################################################
// Sonarqube
// ###################################################################

sonarqube {
  properties {
    property 'sonar.projectKey', 'falkoschumann_java-muspellheim-commons-fx'
  }
}

// ###################################################################
// Maven
// ###################################################################

publishing {
  publications {
    MuspellheimCommonsFXPublication(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId 'de.muspellheim'
      artifactId project.name
      version project.version
    }
  }
}

// ###################################################################
// Bintray
// ###################################################################

ext {
    if (!project.hasProperty('bintrayUser')) {
        bintrayUser = 'bintray_user'
    }
    if (!project.hasProperty('bintrayKey')) {
        bintrayKey = 'bintray_key'
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey
    publications = ['MuspellheimCommonsFXPublication']
    dryRun = false
    pkg {
        repo = 'maven'
        name = project.name
        userOrg = bintrayUser
        licenses = ['MIT']
        vcsUrl = "https://github.com/falkoschumann/java-${project.name}.git"
        githubRepo = "falkoschumann/java-${project.name}"
        version {
            name = project.version
            desc = 'Bundles common classes for developing Java apps with JavaFX.'
            released = new Date()
            vcsTag = "v${project.version}"
        }
    }
}
